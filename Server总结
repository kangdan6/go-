http包（"net/http"）：
request.Body只能读一次, 是io.ReadCloser类型

```
func readBodyOnce(w http.ResponseWriter, r *http.Request)  {
	body, err := io.ReadAll(r.Body)
	if err != nil {
		fmt.Fprintf(w, "read body failed: %v", err)
		// 记住要返回，不然就还会执行后面的代码
		return
	}
	// 类型转换，将 []byte 转换为 string
	fmt.Fprintf(w, "read the data: %s \n", string(body))

	// 尝试再次读取，啥也读不到，但是也不会报错
	body, err = io.ReadAll(r.Body)
	if err != nil {
		// 不会进来这里
		fmt.Fprintf(w, "read the data one more time got error: %v", err)
		return
	}
	fmt.Fprintf(w, "read the data one more time: [%s] and read data length %d \n", string(body), len(body))
}
```

r.GetBody()原则上可以读多次，但是原生r.GetBody()为nil，如果读多次，需要自己读完body,赋值给GetBody
r.query r.header 底层都是map[string][]string

使用r.Form之前要先调用r.ParseForm()

原生http不好用，所以需要自己封装一下，那就包括：
1、Http Server的抽象,是一种逻辑上的抽象，代表的是对某个端口进行监听的实体，必要的时候，也可以开启多个Server,来监听多个端口
主要实现两个方法，Route用于注册路由，一个Start用于启动服务

接口就是一种行为的抽象
```
type Server interface {
	Route(pattern string, handlerFunc http.HandlerFunc)
	Start(address string) error
}
```

GO里没有继承，是组合，不能方法重写，调用的就是组合基类的方法


HTTP 服务器的生命周期？
一般来说就是启动、运行和关闭。在这三个阶段的前后都可以插入生命周期回调。一般来说，面试生命周期，多半都是为了问生命周期回调。例如说怎么做 Web 服务的服务发现？就是利用生命周期回调的启动后回调，将Web 服务注册到服务中心。

• HTTP Server 功能？
记住在不同的框架里面有不同的叫法，比如说在Gin 里面叫做Engine，它们的基本功能都是提供路由注册，生命周期控制以及作为与http包结合的桥梁。

Server 从特性上来说，至少要提供三部分功能：
• 生命周期控制：即启动、关闭。如果在后期，我们还要考虑增加生命周期回调特性
• 路由注册接口：提供路由注册功能
• 作为 http 包到 Web 框架的桥梁

ServeHTTP 方法是作为 http 包与 Web 框架的关联点，需要在 ServeHTTP 内部，执行：
• 构建起 Web 框架的上下文
• 查找路由树，并执行命中路由的代码

