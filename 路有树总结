•路由树算法？
核心就是前缀树。前缀的意思就是，两个节点共同的前缀，将会被抽取出来作为父亲节点。
在我之前的实现的一个web框架中，是按照 / 来切割，每一段作为一个节点。这种和那种没公共前缀的方式相比会更胖，性能差异不大，实现确比前缀树简单！

• 路由匹配的优先级？
本质上这是和 Web 框架相关的。在我们的设计里面是静态匹配> 路径参数>通配符匹配。

• 路由查找会回溯吗？
这也是和 Web 框架相关的，我们在课程上是不支持的。
简单描述可回溯和不可回溯之间的区别，/user/123/home 和 /user/*/*，我这里不支持是因为这个特性非常鸡肋。

• Web 框架是怎么组织路由树的？
通常一个 HTTP 方法是一颗路由树，也可以考虑整体为一颗路由树，每个节点标记自己支持的 HTTP 方法。

• 路由查找的性能受什么影响？或者说怎么评估路由查找的性能？
核心是看路由树的高度，次要因素是路由树的宽度（想想我们的 children 字段）。

• 路由树是线程安全的吗？
严格来说也是跟 Web 框架相关的。大多数都不是线程安全的，这是为了性能。所以才要求大家一定要先注册路由，后启动 Web 服务器。如果你有运行期间动态添加路由的需求，只需要利用装饰器模式，就可以将一个线程不安全的封装为线程安全的路由树。

• 具体匹配方式的实现原理。
首先确定匹配的优先级是，静态匹配>路径匹配>正则匹配>通配符匹配，按照这种顺序去挨个匹配。
